Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
                              Experiment-2.o (__udivmodhi4)
/usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o (exit)
/usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
                              LCD.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

million             0x2               LCD.o
temp                0x2               LCD.o
tens                0x2               LCD.o
hundred             0x2               LCD.o
unit                0x2               LCD.o
thousand            0x2               LCD.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000100000 xr
data             0x0000000000800200 0x000000000000fe00 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800200
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
LOAD Experiment-2.o
LOAD LCD.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x45a
 *(.vectors)
 .vectors       0x0000000000000000       0xe4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000000000000e4                . = ALIGN (0x2)
                0x00000000000000e4                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000000000000e4        0x0 linker stubs
 *(.trampolines*)
                0x00000000000000e4                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000000000000e4                __ctors_start = .
 *(.ctors)
                0x00000000000000e4                __ctors_end = .
                0x00000000000000e4                __dtors_start = .
 *(.dtors)
                0x00000000000000e4                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000000000000e4        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
                0x00000000000000e4                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000000000000e4       0x10 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000000f4       0x10 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
                0x00000000000000f4                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000104        0x8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
 *(.init9)
 *(.text)
 .text          0x000000000000010c        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
                0x000000000000010c                __vector_38
                0x000000000000010c                __vector_22
                0x000000000000010c                __vector_28
                0x000000000000010c                __vector_1
                0x000000000000010c                __vector_32
                0x000000000000010c                __vector_34
                0x000000000000010c                __vector_24
                0x000000000000010c                __vector_12
                0x000000000000010c                __vector_55
                0x000000000000010c                __vector_46
                0x000000000000010c                __bad_interrupt
                0x000000000000010c                __vector_6
                0x000000000000010c                __vector_31
                0x000000000000010c                __vector_35
                0x000000000000010c                __vector_39
                0x000000000000010c                __vector_3
                0x000000000000010c                __vector_23
                0x000000000000010c                __vector_30
                0x000000000000010c                __vector_45
                0x000000000000010c                __vector_25
                0x000000000000010c                __vector_11
                0x000000000000010c                __vector_54
                0x000000000000010c                __vector_13
                0x000000000000010c                __vector_17
                0x000000000000010c                __vector_19
                0x000000000000010c                __vector_56
                0x000000000000010c                __vector_7
                0x000000000000010c                __vector_49
                0x000000000000010c                __vector_41
                0x000000000000010c                __vector_43
                0x000000000000010c                __vector_27
                0x000000000000010c                __vector_5
                0x000000000000010c                __vector_33
                0x000000000000010c                __vector_47
                0x000000000000010c                __vector_52
                0x000000000000010c                __vector_37
                0x000000000000010c                __vector_4
                0x000000000000010c                __vector_44
                0x000000000000010c                __vector_51
                0x000000000000010c                __vector_9
                0x000000000000010c                __vector_2
                0x000000000000010c                __vector_21
                0x000000000000010c                __vector_15
                0x000000000000010c                __vector_36
                0x000000000000010c                __vector_29
                0x000000000000010c                __vector_40
                0x000000000000010c                __vector_8
                0x000000000000010c                __vector_26
                0x000000000000010c                __vector_48
                0x000000000000010c                __vector_14
                0x000000000000010c                __vector_53
                0x000000000000010c                __vector_10
                0x000000000000010c                __vector_50
                0x000000000000010c                __vector_16
                0x000000000000010c                __vector_18
                0x000000000000010c                __vector_20
                0x000000000000010c                __vector_42
 .text          0x0000000000000110       0x18 Experiment-2.o
                0x0000000000000110                multiple_of3
 .text          0x0000000000000128      0x2ba LCD.o
                0x0000000000000128                lcd_port_config
                0x0000000000000136                port_init
                0x000000000000013a                lcd_set_4bit
                0x00000000000001c2                lcd_wr_command
                0x000000000000020c                lcd_init
                0x0000000000000234                lcd_wr_char
                0x000000000000027e                lcd_home
                0x0000000000000284                lcd_string
                0x000000000000029c                lcd_cursor
                0x00000000000002c8                lcd_print
                0x00000000000003d8                init_devices
 .text          0x00000000000003e2        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text          0x00000000000003e2        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text          0x00000000000003e2        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
                0x00000000000003e2                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x00000000000003e2       0x4c Experiment-2.o
                0x00000000000003e2                main
 .text.libgcc.mul
                0x000000000000042e        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text.libgcc.div
                0x000000000000042e       0x28 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
                0x000000000000042e                __udivmodhi4
 .text.libgcc   0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text.libgcc.prologue
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text.libgcc.builtins
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fmul
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fixed
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .text.libgcc.mul
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
                0x0000000000000456                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000456        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
                0x0000000000000456                exit
                0x0000000000000456                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000456        0x4 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000045a                _etext = .

.data           0x0000000000800200        0x0 load address 0x000000000000045a
                0x0000000000800200                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
 .data          0x0000000000800200        0x0 Experiment-2.o
 .data          0x0000000000800200        0x0 LCD.o
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800200                . = ALIGN (0x2)
                0x0000000000800200                _edata = .
                0x0000000000800200                PROVIDE (__data_end, .)

.bss            0x0000000000800200        0xc
                0x0000000000800200                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
 .bss           0x0000000000800200        0x0 Experiment-2.o
 .bss           0x0000000000800200        0x0 LCD.o
 .bss           0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_udivmodhi4.o)
 .bss           0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_exit.o)
 .bss           0x0000000000800200        0x0 /usr/lib/gcc/avr/4.8.2/avr6/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800200        0xc LCD.o
                0x0000000000800200                million
                0x0000000000800202                temp
                0x0000000000800204                tens
                0x0000000000800206                hundred
                0x0000000000800208                unit
                0x000000000080020a                thousand
                0x000000000080020c                PROVIDE (__bss_end, .)
                0x000000000000045a                __data_load_start = LOADADDR (.data)
                0x000000000000045a                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080020c        0x0
                0x000000000080020c                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080020c                PROVIDE (__noinit_end, .)
                0x000000000080020c                _end = .
                0x000000000080020c                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x1920
 *(.stab)
 .stab          0x0000000000000000      0x6e4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o
 .stab          0x00000000000006e4      0x5d0 Experiment-2.o
                                        0x5dc (size before relaxing)
 .stab          0x0000000000000cb4      0xc6c LCD.o
                                        0xe28 (size before relaxing)

.stabstr        0x0000000000000000      0xf71
 *(.stabstr)
 .stabstr       0x0000000000000000      0xf71 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr6/crtm2560.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 Experiment-2.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 LCD.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(Experiment-2.elf elf32-avr)
LOAD linker stubs
