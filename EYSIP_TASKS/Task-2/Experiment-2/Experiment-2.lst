
Experiment-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0000045a  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800200  00800200  000004ee  2**0
                  ALLOC
  3 .stab         00001920  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f71  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002d81  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ac 30       	cpi	r26, 0x0C	; 12
 100:	b1 07       	cpc	r27, r17
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
 108:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <multiple_of3>:
{
  unsigned int result;

  number = ( number > 0) ? number : -number;
  
  if(number % 3 == 0)
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 118:	9c 01       	movw	r18, r24
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	23 2b       	or	r18, r19
 120:	11 f0       	breq	.+4      	; 0x126 <multiple_of3+0x16>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
  else
   {
    result = 0;
   } 
 return result;  
}
 126:	08 95       	ret

00000128 <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 128:	87 b1       	in	r24, 0x07	; 7
 12a:	87 6f       	ori	r24, 0xF7	; 247
 12c:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	80 78       	andi	r24, 0x80	; 128
 132:	88 b9       	out	0x08, r24	; 8
 134:	08 95       	ret

00000136 <port_init>:
}

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();
 136:	0c 94 94 00 	jmp	0x128	; 0x128 <lcd_port_config>

0000013a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	86 e6       	ldi	r24, 0x66	; 102
 13c:	9e e0       	ldi	r25, 0x0E	; 14
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_set_4bit+0x4>
 142:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 144:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 146:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 14c:	42 9a       	sbi	0x08, 2	; 8
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	97 e4       	ldi	r25, 0x47	; 71
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_set_4bit+0x18>
 156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_set_4bit+0x1e>
 158:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 15a:	42 98       	cbi	0x08, 2	; 8
 15c:	86 e6       	ldi	r24, 0x66	; 102
 15e:	9e e0       	ldi	r25, 0x0E	; 14
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_set_4bit+0x26>
 164:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 166:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 168:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 16e:	42 9a       	sbi	0x08, 2	; 8
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	97 e4       	ldi	r25, 0x47	; 71
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_set_4bit+0x3a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_set_4bit+0x40>
 17a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 17c:	42 98       	cbi	0x08, 2	; 8
 17e:	86 e6       	ldi	r24, 0x66	; 102
 180:	9e e0       	ldi	r25, 0x0E	; 14
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x48>
 186:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 188:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 18a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 190:	42 9a       	sbi	0x08, 2	; 8
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	97 e4       	ldi	r25, 0x47	; 71
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x5c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x62>
 19c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 19e:	42 98       	cbi	0x08, 2	; 8
 1a0:	86 e6       	ldi	r24, 0x66	; 102
 1a2:	9e e0       	ldi	r25, 0x0E	; 14
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x6a>
 1a8:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1aa:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1ac:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1b2:	42 9a       	sbi	0x08, 2	; 8
 1b4:	86 e6       	ldi	r24, 0x66	; 102
 1b6:	9e e0       	ldi	r25, 0x0E	; 14
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x7e>
 1bc:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1be:	42 98       	cbi	0x08, 2	; 8
 1c0:	08 95       	ret

000001c2 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1c2:	98 b1       	in	r25, 0x08	; 8
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1c8:	28 b1       	in	r18, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1ca:	98 2f       	mov	r25, r24
 1cc:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1ce:	92 2b       	or	r25, r18
 1d0:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1d2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1d4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1d6:	42 9a       	sbi	0x08, 2	; 8
 1d8:	ef ef       	ldi	r30, 0xFF	; 255
 1da:	f7 e4       	ldi	r31, 0x47	; 71
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_wr_command+0x1a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_wr_command+0x20>
 1e2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1e4:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1e6:	98 b1       	in	r25, 0x08	; 8
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1ec:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1ee:	82 95       	swap	r24
 1f0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1f2:	89 2b       	or	r24, r25
 1f4:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1f6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1f8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1fa:	42 9a       	sbi	0x08, 2	; 8
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	97 e4       	ldi	r25, 0x47	; 71
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_wr_command+0x3e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_wr_command+0x44>
 206:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 208:	42 98       	cbi	0x08, 2	; 8
 20a:	08 95       	ret

0000020c <lcd_init>:
 20c:	86 e6       	ldi	r24, 0x66	; 102
 20e:	9e e0       	ldi	r25, 0x0E	; 14
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x4>
 214:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x01);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x06);
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x0E);
 228:	8e e0       	ldi	r24, 0x0E	; 14
 22a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_wr_command>
	lcd_wr_command(0x80);
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <lcd_wr_command>

00000234 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 234:	98 b1       	in	r25, 0x08	; 8
 236:	9f 70       	andi	r25, 0x0F	; 15
 238:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 23a:	28 b1       	in	r18, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 23c:	98 2f       	mov	r25, r24
 23e:	90 7f       	andi	r25, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 240:	92 2b       	or	r25, r18
 242:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 244:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 246:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 248:	42 9a       	sbi	0x08, 2	; 8
 24a:	ef ef       	ldi	r30, 0xFF	; 255
 24c:	f7 e4       	ldi	r31, 0x47	; 71
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_wr_char+0x1a>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_wr_char+0x20>
 254:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 256:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
 258:	82 95       	swap	r24
 25a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
 25c:	98 b1       	in	r25, 0x08	; 8
 25e:	9f 70       	andi	r25, 0x0F	; 15
 260:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 262:	98 b1       	in	r25, 0x08	; 8
 264:	89 2b       	or	r24, r25
 266:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 268:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 26a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 26c:	42 9a       	sbi	0x08, 2	; 8
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	97 e4       	ldi	r25, 0x47	; 71
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_wr_char+0x3e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_wr_char+0x44>
 278:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 27a:	42 98       	cbi	0x08, 2	; 8
 27c:	08 95       	ret

0000027e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <lcd_wr_command>

00000284 <lcd_string>:
}


//Function to Print String on LCD
void lcd_string(char *str)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	while(*str != '\0')
 28a:	89 91       	ld	r24, Y+
 28c:	88 23       	and	r24, r24
 28e:	19 f0       	breq	.+6      	; 0x296 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
 290:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_wr_char>
 294:	fa cf       	rjmp	.-12     	; 0x28a <lcd_string+0x6>
		str++;
	}
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
 29c:	98 2f       	mov	r25, r24
 29e:	86 2f       	mov	r24, r22
	switch (row) {
 2a0:	92 30       	cpi	r25, 0x02	; 2
 2a2:	59 f0       	breq	.+22     	; 0x2ba <lcd_cursor+0x1e>
 2a4:	1c f4       	brge	.+6      	; 0x2ac <lcd_cursor+0x10>
 2a6:	91 30       	cpi	r25, 0x01	; 1
 2a8:	31 f0       	breq	.+12     	; 0x2b6 <lcd_cursor+0x1a>
 2aa:	08 95       	ret
 2ac:	93 30       	cpi	r25, 0x03	; 3
 2ae:	39 f0       	breq	.+14     	; 0x2be <lcd_cursor+0x22>
 2b0:	94 30       	cpi	r25, 0x04	; 4
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <lcd_cursor+0x26>
 2b4:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b6:	81 58       	subi	r24, 0x81	; 129
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	81 54       	subi	r24, 0x41	; 65
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2be:	8d 56       	subi	r24, 0x6D	; 109
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <lcd_cursor+0x28>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2c2:	8d 52       	subi	r24, 0x2D	; 45
 2c4:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <lcd_wr_command>

000002c8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	8a 01       	movw	r16, r20
 2d2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2d4:	88 23       	and	r24, r24
 2d6:	11 f0       	breq	.+4      	; 0x2dc <lcd_print+0x14>
 2d8:	61 11       	cpse	r22, r1
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <lcd_print+0x1a>
	{
		lcd_home();
 2dc:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_home>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2e2:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2e6:	c5 30       	cpi	r28, 0x05	; 5
 2e8:	d1 05       	cpc	r29, r1
 2ea:	79 f4       	brne	.+30     	; 0x30a <lcd_print+0x42>
	{
		million=value/10000+48;
 2ec:	c8 01       	movw	r24, r16
 2ee:	60 e1       	ldi	r22, 0x10	; 16
 2f0:	77 e2       	ldi	r23, 0x27	; 39
 2f2:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 2f6:	60 5d       	subi	r22, 0xD0	; 208
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	70 93 01 02 	sts	0x0201, r23
 2fe:	60 93 00 02 	sts	0x0200, r22
		lcd_wr_char(million);
 302:	86 2f       	mov	r24, r22
 304:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_wr_char>
 308:	03 c0       	rjmp	.+6      	; 0x310 <lcd_print+0x48>
		flag=1;
	}
	if(digits==4 || flag==1)
 30a:	c4 30       	cpi	r28, 0x04	; 4
 30c:	d1 05       	cpc	r29, r1
 30e:	59 f5       	brne	.+86     	; 0x366 <lcd_print+0x9e>
	{
		temp = value/1000;
 310:	c8 01       	movw	r24, r16
 312:	68 ee       	ldi	r22, 0xE8	; 232
 314:	73 e0       	ldi	r23, 0x03	; 3
 316:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 31a:	cb 01       	movw	r24, r22
 31c:	70 93 03 02 	sts	0x0203, r23
 320:	60 93 02 02 	sts	0x0202, r22
		thousand = temp%10 + 48;
 324:	6a e0       	ldi	r22, 0x0A	; 10
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 32c:	c0 96       	adiw	r24, 0x30	; 48
 32e:	90 93 0b 02 	sts	0x020B, r25
 332:	80 93 0a 02 	sts	0x020A, r24
		lcd_wr_char(thousand);
 336:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_wr_char>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 33a:	c8 01       	movw	r24, r16
 33c:	64 e6       	ldi	r22, 0x64	; 100
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 344:	cb 01       	movw	r24, r22
 346:	70 93 03 02 	sts	0x0203, r23
 34a:	60 93 02 02 	sts	0x0202, r22
		hundred = temp%10 + 48;
 34e:	6a e0       	ldi	r22, 0x0A	; 10
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 356:	c0 96       	adiw	r24, 0x30	; 48
 358:	90 93 07 02 	sts	0x0207, r25
 35c:	80 93 06 02 	sts	0x0206, r24
		lcd_wr_char(hundred);
 360:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_wr_char>
 364:	06 c0       	rjmp	.+12     	; 0x372 <lcd_print+0xaa>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 366:	c3 30       	cpi	r28, 0x03	; 3
 368:	d1 05       	cpc	r29, r1
 36a:	39 f3       	breq	.-50     	; 0x33a <lcd_print+0x72>
		temp = value/100;
		hundred = temp%10 + 48;
		lcd_wr_char(hundred);
		flag=1;
	}
	if(digits==2 || flag==1)
 36c:	c2 30       	cpi	r28, 0x02	; 2
 36e:	d1 05       	cpc	r29, r1
 370:	51 f5       	brne	.+84     	; 0x3c6 <lcd_print+0xfe>
	{
		temp = value/10;
 372:	2a e0       	ldi	r18, 0x0A	; 10
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	c8 01       	movw	r24, r16
 378:	b9 01       	movw	r22, r18
 37a:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 37e:	cb 01       	movw	r24, r22
 380:	70 93 03 02 	sts	0x0203, r23
 384:	60 93 02 02 	sts	0x0202, r22
		tens = temp%10 + 48;
 388:	b9 01       	movw	r22, r18
 38a:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 38e:	c0 96       	adiw	r24, 0x30	; 48
 390:	90 93 05 02 	sts	0x0205, r25
 394:	80 93 04 02 	sts	0x0204, r24
		lcd_wr_char(tens);
 398:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 39c:	c8 01       	movw	r24, r16
 39e:	6a e0       	ldi	r22, 0x0A	; 10
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	0e 94 17 02 	call	0x42e	; 0x42e <__udivmodhi4>
 3a6:	c0 96       	adiw	r24, 0x30	; 48
 3a8:	90 93 09 02 	sts	0x0209, r25
 3ac:	80 93 08 02 	sts	0x0208, r24
		lcd_wr_char(unit);
 3b0:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_wr_char>
	}
	if(digits>5)
 3b4:	26 97       	sbiw	r28, 0x06	; 6
 3b6:	5c f0       	brlt	.+22     	; 0x3ce <lcd_print+0x106>
	{
		lcd_wr_char('E');
 3b8:	85 e4       	ldi	r24, 0x45	; 69
	}
	
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
		unit = value%10 + 48;
		lcd_wr_char(unit);
	}
	if(digits>5)
	{
		lcd_wr_char('E');
 3c2:	0c 94 1a 01 	jmp	0x234	; 0x234 <lcd_wr_char>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 3c6:	c1 30       	cpi	r28, 0x01	; 1
 3c8:	d1 05       	cpc	r29, r1
 3ca:	a1 f7       	brne	.-24     	; 0x3b4 <lcd_print+0xec>
 3cc:	e7 cf       	rjmp	.-50     	; 0x39c <lcd_print+0xd4>
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <init_devices>:
 3d8:	f8 94       	cli
 3da:	0e 94 94 00 	call	0x128	; 0x128 <lcd_port_config>
 3de:	78 94       	sei
 3e0:	08 95       	ret

000003e2 <main>:

int main (void)
{
	init_devices();
 3e2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <init_devices>
	lcd_set_4bit();
 3e6:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_set_4bit>
	lcd_init();
 3ea:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_init>
	int i =0;
	int j =1;
	int result_value=0;
	result_value = multiple_of3(9);
        lcd_print(i, i, result_value, j);
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_print>
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9c e2       	ldi	r25, 0x2C	; 44
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	80 40       	sbci	r24, 0x00	; 0
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	e1 f7       	brne	.-8      	; 0x408 <main+0x26>
 410:	00 c0       	rjmp	.+0      	; 0x412 <main+0x30>
 412:	00 00       	nop
	_delay_ms(1000);
        result_value = multiple_of3(31);
	lcd_print(i, i, result_value, j);
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_print>
	return 0;
}
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	08 95       	ret

0000042e <__udivmodhi4>:
 42e:	aa 1b       	sub	r26, r26
 430:	bb 1b       	sub	r27, r27
 432:	51 e1       	ldi	r21, 0x11	; 17
 434:	07 c0       	rjmp	.+14     	; 0x444 <__udivmodhi4_ep>

00000436 <__udivmodhi4_loop>:
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	a6 17       	cp	r26, r22
 43c:	b7 07       	cpc	r27, r23
 43e:	10 f0       	brcs	.+4      	; 0x444 <__udivmodhi4_ep>
 440:	a6 1b       	sub	r26, r22
 442:	b7 0b       	sbc	r27, r23

00000444 <__udivmodhi4_ep>:
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	5a 95       	dec	r21
 44a:	a9 f7       	brne	.-22     	; 0x436 <__udivmodhi4_loop>
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	bc 01       	movw	r22, r24
 452:	cd 01       	movw	r24, r26
 454:	08 95       	ret

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
